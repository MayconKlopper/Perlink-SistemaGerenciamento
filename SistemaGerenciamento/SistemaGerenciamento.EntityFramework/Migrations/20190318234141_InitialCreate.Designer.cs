// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SistemaGerenciamento.EntityFramework.Conections;

namespace SistemaGerenciamento.EntityFramework.Migrations
{
    [DbContext(typeof(Conection))]
    [Migration("20190318234141_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SistemaGerenciamento.Domain.Entities.Company", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasMaxLength(14);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id")
                        .HasName("PK_Company");

                    b.ToTable("Company");

                    b.HasData(
                        new { Id = 1L, CNPJ = "00000000000001", Name = "Empresa A", State = "Rio de Janeiro" },
                        new { Id = 2L, CNPJ = "00000000000002", Name = "Empresa B", State = "São Paulo" }
                    );
                });

            modelBuilder.Entity("SistemaGerenciamento.Domain.Entities.Process", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<DateTimeOffset>("CreationDate");

                    b.Property<long>("IdCompany");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<decimal>("Value");

                    b.HasKey("Id")
                        .HasName("PK_Process");

                    b.HasIndex("IdCompany");

                    b.ToTable("Process");

                    b.HasData(
                        new { Id = 1L, Active = true, CreationDate = new DateTimeOffset(new DateTime(2007, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -3, 0, 0, 0)), IdCompany = 1L, Number = "00001CIVELRJ", State = "Rio de Janeiro", Value = 200000m },
                        new { Id = 2L, Active = true, CreationDate = new DateTimeOffset(new DateTime(2007, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -2, 0, 0, 0)), IdCompany = 1L, Number = "00002CIVELSP", State = "São Paulo", Value = 100000m },
                        new { Id = 3L, Active = false, CreationDate = new DateTimeOffset(new DateTime(2007, 10, 30, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -2, 0, 0, 0)), IdCompany = 1L, Number = "00003TRABMG", State = "Minas Gerais", Value = 10000m },
                        new { Id = 4L, Active = false, CreationDate = new DateTimeOffset(new DateTime(2007, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -2, 0, 0, 0)), IdCompany = 1L, Number = "00004CIVELRJ", State = "Rio de Janeiro", Value = 20000m },
                        new { Id = 5L, Active = true, CreationDate = new DateTimeOffset(new DateTime(2007, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -2, 0, 0, 0)), IdCompany = 1L, Number = "00005CIVELSP", State = "São Paulo", Value = 35000m },
                        new { Id = 6L, Active = true, CreationDate = new DateTimeOffset(new DateTime(2007, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -3, 0, 0, 0)), IdCompany = 2L, Number = "00006CIVELRJ", State = "Rio Janeiro", Value = 20000m },
                        new { Id = 7L, Active = true, CreationDate = new DateTimeOffset(new DateTime(2007, 6, 2, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -3, 0, 0, 0)), IdCompany = 2L, Number = "00007CIVELRJ", State = "Rio de Janeiro", Value = 700000m },
                        new { Id = 8L, Active = false, CreationDate = new DateTimeOffset(new DateTime(2007, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -3, 0, 0, 0)), IdCompany = 2L, Number = "00008CIVELSP", State = "São Paulo", Value = 500m },
                        new { Id = 9L, Active = true, CreationDate = new DateTimeOffset(new DateTime(2007, 8, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -3, 0, 0, 0)), IdCompany = 2L, Number = "00009CIVELSP", State = "São Paulo", Value = 32000m },
                        new { Id = 10L, Active = false, CreationDate = new DateTimeOffset(new DateTime(2007, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -3, 0, 0, 0)), IdCompany = 2L, Number = "00010TRABAM", State = "Amazonas", Value = 1000m }
                    );
                });

            modelBuilder.Entity("SistemaGerenciamento.Domain.Entities.Process", b =>
                {
                    b.HasOne("SistemaGerenciamento.Domain.Entities.Company", "Company")
                        .WithMany("Processes")
                        .HasForeignKey("IdCompany")
                        .HasConstraintName("FK_Company_Process")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
